/* 
Display
-------
The display property sets whether an element is treated as a block or inline box 
and the layout used for its children, such as flow layout, grid or flex.
        - It specifies the display behavior (the type of rendering box) of an element.
        - display: none || inline || block || inline-block || flex || grid & so on…

block
-----
    - Always starts on new line
    - Takes up as much horizontal space possible
            - i.e., full width of container (or) browser window
    - Accepts Width & height properties
    - Both Horizontal & vertical margins/padding works  

inline
------
    - DO NOT start on new line, but from the end of the previous element
    - Takes up horizontal space required by the content
    - DO NOT Accepts Width & height properties
    - Margins only work horizantally but NOT Verically
    - Padding works both vertical & horizontal 
            - But vertical may overlap with other elements

inline-block
------------
    - In Inline, styles cannot be maintained/retained
    - In block, styles are maintaned but takes up whole space
    - i.e., why inline-block is introduced.
    - Inline-block retains all the style properties but behaves like a inline element.
*/



/* 
RELATIVE UNITS:
--------------

Percentage ( % )
---------------
    - Used to set the size as relative to the parent’s element
    - margin: 33.33% ⇒ relative to parent’s size [33.33% of parent’s element size ]

NOTE:
----
    - Here parent’s size means → width of the parent’s element [if no width, then height]
    - But NOT the child’s repective property of it’s parent
*/
#out_div {
    height: 400px;
    width: 200px;
    margin: 10px;
    background-color: burlywood;
}
#in_div {
    height: 100px;
    width: 50px;
    background-color: coral;
    margin: 20%;
		/* margin = 40px, it took value of width [20% of 200] */
}



/* 
em
--
    - Realtive to `font-size` of parent [ in case of typographical properties like font-size ]
    - Relative to `font-size` of element itself [ in case of other properties like width, padding, margin etc.. ]
*/
#out_div {
    height: 400px;
    width: 200px;
    margin: 10px;
    background-color: burlywood;
    font-size: 10px;
}
#in_div {
    height: 100px;
    width: 50px;
    background-color: coral;
    font-size: 2em; 
    /* This font-size == 20px [2em == 2*parent's font=size] It will take parent's value */
    padding: 1em;
    /* This padding == 20px [1em == 2em == 20px] It will take it's own value */
}


/* 
NOTE:
----
    - Major Drawback of "em" unit is "Snowball" effect [ in nested elements ]

        <section>
            section
            <div>
                div1
                <div>
                    div2
                    <div>div3</div>
                </div>
            </div>
        </section>
*/
div {
    font-size: 2em;
    /* If NO font-size is present, then em (or) rem will take browser’s default value [ 16px ] */
}


/* 
rem [Root em]
------------
- To address em issue of snowball effect, rem is introduced
- rem → relative to `font-size` of root element [root → topmost element where font-size is available]

NOTE:
----
- If NO font-size is present, then em (or) rem will take browser’s default value [ 16px ]
*/
